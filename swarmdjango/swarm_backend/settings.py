"""
Django settings for swarm_backend project.

Generated by 'django-admin startproject' using Django 2.2.15.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

from django.core.exceptions import ImproperlyConfigured
from decouple import config
from decouple import UndefinedValueError
from datetime import timedelta
import os

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# SECURITY WARNING: keep the secret key used in production secret

SECRET_KEY = config('SECRET_KEY', default="secretkeyorsomethin")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)


ALLOWED_HOSTS = [
    config('ALLOWED_HOST', default='0.0.0.0'),
    'localhost',
    'swarmrobotics.io',
    'swarm-robotics-env.us-east-1.elasticbeanstalk.com'
]

CORS_ORIGIN_ALLOW_ALL = False

CORS_ORIGIN_WHITELIST = [
    config('CORS_ORIGIN_WHITELIST', default="http://localhost:3000"),
    config('CORS_ORIGIN_WHITELIST', default="http://0.0.0.0:8000"),
    config('CORS_ORIGIN_WHITELIST', default="https://swarmrobotics.io"),
    config('CORS_ORIGIN_WHITELIST', default="http://swarm-robotics-env.us-east-1.elasticbeanstalk.com")
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
    'rest_framework',
    'django_filters',
    'corsheaders'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]

ROOT_URLCONF = 'swarm_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'build')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'swarm_backend.wsgi.application'


# connect to postgres container via hostname,
# this is possible as we are running on a network bridge

try:
    if config('PRODUCTION', cast=bool):
        DATABASES = {
            'default': {
                'ENGINE': config('RDS_ENGINE', default='django.db.backends.postgresql'),
                'NAME': config('RDS_NAME', default='swarm'),
                'USER': config('RDS_USER', default='admin'),
                'PASSWORD': config('RDS_PASSWORD', default='DB_PASSWORD'),
                'HOST': config('RDS_HOST', default='swarmpostgres'),
                'PORT': config('RDS_PORT', default='5432'),
            }
        }
    else:
        raise UndefinedValueError
except UndefinedValueError:
    DATABASES = {
        'default': {
            'ENGINE': config('SQL_ENGINE', default='django.db.backends.postgresql'),
            'NAME': config('DATABASE_NAME', default='swarm'),
            'USER': config('SQL_USER', default='admin'),
            'PASSWORD': config('SQL_PASSWORD', default='batman'),
            'HOST': config('SQL_HOST', default='swarmpostgres'),
            'PORT': 5432,
        }
    }


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "build/static")
]

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
#   'DEFAULT_PARSER_CLASSES': [
#       'rest_framework.parsers.'
#   ]
}

AUTH_USER_MODEL = "core.User"

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=7),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=14),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',

    'AUTH_HEADER_TYPES': ('Bearer',),

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

}